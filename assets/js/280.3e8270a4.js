(window.webpackJsonp=window.webpackJsonp||[]).push([[280],{701:function(e,v,a){"use strict";a.r(v);var _=a(14),t=Object(_.a)({},(function(){var e=this,v=e.$createElement,a=e._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("IO是指Input/Output，即输入和输出。以内存为中心：")]),e._v(" "),a("ul",[a("li",[e._v("Input指从外部读入数据到内存，例如，把文件从磁盘读取到内存，从网络读取数据到内存等等。")]),e._v(" "),a("li",[e._v("Output指把数据从内存输出到外部，例如，把数据从内存写入到文件，把数据从内存输出到网络等等。")])]),e._v(" "),a("p",[e._v("为什么要把数据读到内存才能处理这些数据？因为代码是在内存中运行的，数据也必须读到内存，最终的表示方式无非是byte数组，字符串等，都必须存放在内存里。")]),e._v(" "),a("p",[e._v("从Java代码来看，输入实际上就是从外部，例如，硬盘上的某个文件，把内容读到内存，并且以Java提供的某种数据类型表示，例如，"),a("code",[e._v("byte[]")]),e._v("，"),a("code",[e._v("String")]),e._v("，这样，后续代码才能处理这些数据。")]),e._v(" "),a("p",[e._v("因为内存有“易失性”的特点，所以必须把处理后的数据以某种方式输出，例如，写入到文件。Output实际上就是把Java表示的数据格式，例如，"),a("code",[e._v("byte[]")]),e._v("，"),a("code",[e._v("String")]),e._v("等输出到某个地方。")]),e._v(" "),a("p",[e._v("IO流是一种顺序读写数据的模式，它的特点是单向流动。数据类似自来水一样在水管中流动，所以我们把它称为IO流。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://zeroone-bucket.oss-cn-beijing.aliyuncs.com/vuepress/20200713131627.jpeg",alt:"java-io"}})]),e._v(" "),a("h3",{attrs:{id:"inputstream-outputstream"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#inputstream-outputstream"}},[e._v("#")]),e._v(" InputStream / OutputStream")]),e._v(" "),a("p",[e._v("IO流以"),a("code",[e._v("byte")]),e._v("（字节）为最小单位，因此也称为"),a("em",[e._v("字节流")]),e._v("。例如，我们要从磁盘读入一个文件，包含6个字节，就相当于读入了6个字节的数据：")]),e._v(" "),a("div",{staticClass:"language-ascii line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("╔════════════╗\n║   Memory   ║\n╚════════════╝\n       ▲\n       │0x48\n       │0x65\n       │0x6c\n       │0x6c\n       │0x6f\n       │0x21\n ╔═══════════╗\n ║ Hard Disk ║\n ╚═══════════╝\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br")])]),a("p",[e._v("这6个字节是按顺序读入的，所以是输入字节流。")]),e._v(" "),a("p",[e._v("反过来，我们把6个字节从内存写入磁盘文件，就是输出字节流：")]),e._v(" "),a("div",{staticClass:"language-ascii line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("╔════════════╗\n║   Memory   ║\n╚════════════╝\n       │0x21\n       │0x6f\n       │0x6c\n       │0x6c\n       │0x65\n       │0x48\n       ▼\n ╔═══════════╗\n ║ Hard Disk ║\n ╚═══════════╝\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br")])]),a("p",[e._v("在Java中，"),a("code",[e._v("InputStream")]),e._v("代表输入字节流，"),a("code",[e._v("OuputStream")]),e._v("代表输出字节流，这是最基本的两种IO流。")]),e._v(" "),a("h3",{attrs:{id:"reader-writer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reader-writer"}},[e._v("#")]),e._v(" Reader / Writer")]),e._v(" "),a("p",[e._v("如果我们需要读写的是字符，并且字符不全是单字节表示的ASCII字符，那么，按照"),a("code",[e._v("char")]),e._v("来读写显然更方便，这种流称为"),a("em",[e._v("字符流")]),e._v("。")]),e._v(" "),a("p",[e._v("Java提供了"),a("code",[e._v("Reader")]),e._v("和"),a("code",[e._v("Writer")]),e._v("表示字符流，字符流传输的最小数据单位是"),a("code",[e._v("char")]),e._v("。")]),e._v(" "),a("p",[e._v("例如，我们把"),a("code",[e._v("char[]")]),e._v("数组"),a("code",[e._v("Hi你好")]),e._v("这4个字符用"),a("code",[e._v("Writer")]),e._v("字符流写入文件，并且使用UTF-8编码，得到的最终文件内容是8个字节，英文字符"),a("code",[e._v("H")]),e._v("和"),a("code",[e._v("i")]),e._v("各占一个字节，中文字符"),a("code",[e._v("你好")]),e._v("各占3个字节：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("0x48\n0x69\n0xe4bda0\n0xe5a5bd\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v("反过来，我们用"),a("code",[e._v("Reader")]),e._v("读取以UTF-8编码的这8个字节，会从"),a("code",[e._v("Reader")]),e._v("中得到"),a("code",[e._v("Hi你好")]),e._v("这4个字符。")]),e._v(" "),a("p",[e._v("因此，"),a("code",[e._v("Reader")]),e._v("和"),a("code",[e._v("Writer")]),e._v("本质上是一个能自动编解码的"),a("code",[e._v("InputStream")]),e._v("和"),a("code",[e._v("OutputStream")]),e._v("。")]),e._v(" "),a("p",[e._v("使用"),a("code",[e._v("Reader")]),e._v("，数据源虽然是字节，但我们读入的数据都是"),a("code",[e._v("char")]),e._v("类型的字符，原因是"),a("code",[e._v("Reader")]),e._v("内部把读入的"),a("code",[e._v("byte")]),e._v("做了解码，转换成了"),a("code",[e._v("char")]),e._v("。使用"),a("code",[e._v("InputStream")]),e._v("，我们读入的数据和原始二进制数据一模一样，是"),a("code",[e._v("byte[]")]),e._v("数组，但是我们可以自己把二进制"),a("code",[e._v("byte[]")]),e._v("数组按照某种编码转换为字符串。究竟使用"),a("code",[e._v("Reader")]),e._v("还是"),a("code",[e._v("InputStream")]),e._v("，要取决于具体的使用场景。如果数据源不是文本，就只能使用"),a("code",[e._v("InputStream")]),e._v("，如果数据源是文本，使用Reader更方便一些。"),a("code",[e._v("Writer")]),e._v("和"),a("code",[e._v("OutputStream")]),e._v("是类似的。")]),e._v(" "),a("h3",{attrs:{id:"同步和异步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同步和异步"}},[e._v("#")]),e._v(" 同步和异步")]),e._v(" "),a("p",[e._v("同步IO是指，读写IO时代码必须等待数据返回后才继续执行后续代码，它的优点是代码编写简单，缺点是CPU执行效率低。")]),e._v(" "),a("p",[e._v("而异步IO是指，读写IO时仅发出请求，然后立刻执行后续代码，它的优点是CPU执行效率高，缺点是代码编写复杂。")]),e._v(" "),a("p",[e._v("Java标准库的包"),a("code",[e._v("java.io")]),e._v("提供了同步IO，而"),a("code",[e._v("java.nio")]),e._v("则是异步IO。上面我们讨论的"),a("code",[e._v("InputStream")]),e._v("、"),a("code",[e._v("OutputStream")]),e._v("、"),a("code",[e._v("Reader")]),e._v("和"),a("code",[e._v("Writer")]),e._v("都是同步IO的抽象类，对应的具体实现类，以文件为例，有"),a("code",[e._v("FileInputStream")]),e._v("、"),a("code",[e._v("FileOutputStream")]),e._v("、"),a("code",[e._v("FileReader")]),e._v("和"),a("code",[e._v("FileWriter")]),e._v("。")]),e._v(" "),a("p",[e._v("本节我们只讨论Java的同步IO，即输入/输出流的IO模型。")]),e._v(" "),a("h3",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[e._v("#")]),e._v(" 小结")]),e._v(" "),a("p",[e._v("IO流是一种流式的数据输入/输出模型：")]),e._v(" "),a("ul",[a("li",[e._v("二进制数据以"),a("code",[e._v("byte")]),e._v("为最小单位在"),a("code",[e._v("InputStream")]),e._v("/"),a("code",[e._v("OutputStream")]),e._v("中单向流动；")]),e._v(" "),a("li",[e._v("字符数据以"),a("code",[e._v("char")]),e._v("为最小单位在"),a("code",[e._v("Reader")]),e._v("/"),a("code",[e._v("Writer")]),e._v("中单向流动。")])]),e._v(" "),a("p",[e._v("Java标准库的"),a("code",[e._v("java.io")]),e._v("包提供了同步IO功能：")]),e._v(" "),a("ul",[a("li",[e._v("字节流接口："),a("code",[e._v("InputStream")]),e._v("/"),a("code",[e._v("OutputStream")]),e._v("；")]),e._v(" "),a("li",[e._v("字符流接口："),a("code",[e._v("Reader")]),e._v("/"),a("code",[e._v("Writer")]),e._v("。")])])])}),[],!1,null,null,null);v.default=t.exports}}]);