(window.webpackJsonp=window.webpackJsonp||[]).push([[318],{733:function(s,t,a){"use strict";a.r(t);var n=a(14),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"什么是泛型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是泛型"}},[s._v("#")]),s._v(" 什么是泛型")]),s._v(" "),a("p",[s._v("泛型最早是为了解决集合元素的类型只能是Object而出现。")]),s._v(" "),a("p",[s._v("泛型的好处有很多，泛型可以指定对象只能是某种类型或者某种类型的子类。这样写代码将会非常方便。")]),s._v(" "),a("p",[s._v("泛型的继承关系也很重要。")]),s._v(" "),a("p",[s._v("可以把"),a("code",[s._v("ArrayList<Integer>")]),s._v("向上转型为"),a("code",[s._v("List<Integer>")]),s._v("（"),a("code",[s._v("T")]),s._v("不能变！），但不能把"),a("code",[s._v("ArrayList<Integer>")]),s._v("向上转型为"),a("code",[s._v("ArrayList<Number>")]),s._v("（"),a("code",[s._v("T")]),s._v("不能变成父类）")]),s._v(" "),a("h2",{attrs:{id:"使用泛型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用泛型"}},[s._v("#")]),s._v(" 使用泛型")]),s._v(" "),a("p",[s._v("泛型可以用在对象上、用在对象的构造方法上（普通方法也可以）、还可以用在接口上。")]),s._v(" "),a("p",[s._v("泛型可以自动推断泛型类型，比如")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 可以省略后面的Number，编译器可以自动推断泛型类型：")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" list "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("还有泛型接口，定义一个泛型接口，其他对象实现这个接口。")]),s._v(" "),a("h2",{attrs:{id:"编写泛型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编写泛型"}},[s._v("#")]),s._v(" 编写泛型")]),s._v(" "),a("p",[s._v("泛型可以写在类名右边，方便类内部使用。（方法参数、返回值类型都可以使用），泛型可以定义多个，（只要是大写字母即可），比如 <T,S,V,D>")]),s._v(" "),a("p",[s._v("这里要注意泛型不能用于静态方法。")]),s._v(" "),a("p",[s._v("Java使用擦拭法实现泛型，这样有一些好处，也有一些局限。")]),s._v(" "),a("h2",{attrs:{id:"extends通配符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#extends通配符"}},[s._v("#")]),s._v(" extends通配符")]),s._v(" "),a("p",[s._v("extends通配符的好处就是可以对泛型指定父类。")]),s._v(" "),a("p",[s._v("默认的泛型是Object(什么类型都可以)，")]),s._v(" "),a("p",[s._v("指定类型之后，泛型只能是该类型或者该类型的子类（包括接口），")]),s._v(" "),a("p",[s._v("这样，方法内部就可以使用指定类型的属性和方法。")]),s._v(" "),a("p",[s._v("比如：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sumOfList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" sum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("内部就可以使用Integer的特殊用法。")]),s._v(" "),a("h2",{attrs:{id:"super通配符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#super通配符"}},[s._v("#")]),s._v(" super通配符")]),s._v(" "),a("p",[s._v("super通配符和extends通配符相反，如果需要某个类型及其父类，则需要使用super通配符。")]),s._v(" "),a("p",[s._v("同时还有无限定通配符。他们有各自的用法。")]),s._v(" "),a("p",[s._v("还有泛型和反射的部分，这些初学者可以略过，在第二次复习时仔细研究。")])])}),[],!1,null,null,null);t.default=e.exports}}]);