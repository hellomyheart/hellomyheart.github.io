(window.webpackJsonp=window.webpackJsonp||[]).push([[155],{571:function(v,_,t){"use strict";t.r(_);var a=t(15),e=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("p",[v._v("封装、继承、多态是Java面向对象的三大特性。")]),v._v(" "),t("h2",{attrs:{id:"封装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#封装"}},[v._v("#")]),v._v(" 封装")]),v._v(" "),t("p",[v._v("将一组代码放到一个方法里面是封装。")]),v._v(" "),t("p",[v._v("将属性私有，提供getter、setter方法也是封装。")]),v._v(" "),t("p",[v._v("将一组方法和属性放在一起，组成一个类，这也是封装。")]),v._v(" "),t("p",[v._v("将一组类放到一个包里也是封装。")]),v._v(" "),t("p",[v._v("接口、抽象类这些也是封装。")]),v._v(" "),t("p",[v._v("封装就是归纳，对外暴露接口，隐藏内部细节。")]),v._v(" "),t("h2",{attrs:{id:"继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[v._v("#")]),v._v(" 继承")]),v._v(" "),t("p",[v._v("第一节讲的 类是对象的抽象、概括。")]),v._v(" "),t("p",[v._v("对象（实例）是类的详细、具体。")]),v._v(" "),t("p",[v._v("如果对类这个抽象的东西再抽象，是什么呢？")]),v._v(" "),t("p",[v._v("可以是抽象类、接口、也可以是父类。")]),v._v(" "),t("p",[v._v("从下往上看，继承是对抽象的抽象，可以实现代码复用。")]),v._v(" "),t("p",[v._v("从上往下看，继承是为了扩展更多的类，相对具体一点的类（动物类到猫类，狗类）。")]),v._v(" "),t("p",[v._v("使用继承实现了代码复用。")]),v._v(" "),t("h2",{attrs:{id:"多态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多态"}},[v._v("#")]),v._v(" 多态")]),v._v(" "),t("p",[v._v("多态，子类重写父类方法，父类引用指向子类对象。实现了运行期间动态调用方法。")]),v._v(" "),t("p",[v._v("从上往下看，便于功能的扩展。（java笔记里有详细介绍）")]),v._v(" "),t("p",[v._v("从下往上看，便于代码聚合，降低耦合。（将跑这个方法提到动物类中，使用动物类即可调用跑这个方法，不需要调用猫、兔子这些类的实例）。")])])}),[],!1,null,null,null);_.default=e.exports}}]);