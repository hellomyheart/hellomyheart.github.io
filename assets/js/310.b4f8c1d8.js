(window.webpackJsonp=window.webpackJsonp||[]).push([[310],{729:function(t,v,e){"use strict";e.r(v);var _=e(14),a=Object(_.a)({},(function(){var t=this,v=t.$createElement,e=t._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("关于异常，之前学过C语言的都知道,如果出现了错误，一般会return 0 或者 -1什么的，调用方根据返回的值来判断代码运行是否正常。")]),t._v(" "),e("p",[t._v("Java里面有了对象这个概念，就比较简单了。jdk自己定义了一个异常对象，如果某些地方出现了异常，比如数学运算中除0了， 就会创建一个异常对象，这个对象有异常的简单描述，比如0不能做除数，数组下标越界等等，然后再把堆栈信息放到这个异常对象了，放到开发者调试和查看。这样，就比单纯的返回一个code(0 、1、200)这些更要友好。")]),t._v(" "),e("p",[t._v("异常也是对象，可以 new 出来。")]),t._v(" "),e("p",[t._v("换句话说，异常也就是一个普通的对象。异常类也就是一个普通的类，里面描述了异常说明，堆栈信息等等。")]),t._v(" "),e("p",[t._v("而 Java将这个异常机制放到了JDK中，定义了一些常见的官方异常。设定了一些try catche等等机制。")]),t._v(" "),e("p",[t._v("很像枚举类、记录类这些，既有普通，又有特殊。我们也可以定义我们的业务异常，继承自jdk的异常类。")]),t._v(" "),e("h2",{attrs:{id:"异常的诞生"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#异常的诞生"}},[t._v("#")]),t._v(" 异常的诞生")]),t._v(" "),e("p",[t._v("异常的本质是由于代码不能出现歧义，即确定性。")]),t._v(" "),e("p",[t._v("如果让计算机运行 5 / 0 ,计算机是不知道答案是多少的，这时程序就不知道怎么办了，继续往下运行？不可以，暂停？也不行。都不合适，就只能停止运行了。")]),t._v(" "),e("p",[t._v("这时引入异常机制，在代码出现异常时，有其他办法处理，让程序继续运行，或者说让程序永远保持运行状态，不至于停止。这就是异常这个概念出现的原因。")])])}),[],!1,null,null,null);v.default=a.exports}}]);